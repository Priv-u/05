'''Главный модуль приложения'''
import sqlite3
import os
from flask import Flask, render_template, url_for, request,\
                    flash, redirect, session, abort, g
import config #Импортируем настройки из отдельного файла
from f_data_base import FDataBase

menu = [{'name':'Главная', 'url':'/'},
        {'name':'Статьи', 'url':'articles'},
        {'name':'Обратная связь', 'url':'/contact'},
        {'name':'О сайте', 'url':'/about'},
        {'name':'Войти', 'url':'login'}
        ]

app = Flask(__name__)
app.config.from_object(config)
app.config.update(dict(DATABASE=os.path.join(app.root_path, 'site.db')))


def connect_db():
    '''функция создает соединение с базой данных'''
    conn = sqlite3.connect(app.config['DATABASE'])
    conn.row_factory=sqlite3.Row
    return conn


def create_db():
    '''Функция создает базу данных'''
    data_base = connect_db()
    with app.open_resource('sq_db.sql', mode='r') as f_sql:
        data_base.cursor().executescript(f_sql.read())
    data_base.commit()
    data_base.close()


def get_db():
    '''Функция устанавливает соединение с базой данных,
     если оно еще не установлено'''
    if not hasattr(g, 'link_db'):
        g.link_db = connect_db()
    return g.link_db


d_base = None
@app.before_request
def before_request():
    '''Устанавливаем соединение с БД перед выполнением запроса'''
    global d_base
    db = get_db()
    d_base = FDataBase(db) 


@app.route('/')
def index():
    '''Обработчик главной страницы'''
    db = get_db()
    d_base = FDataBase(db)
    return render_template('index.html', menu=d_base.get_menu(), posts = d_base.get_post_anons())


@app.teardown_appcontext
def close_db(error):
    '''Функция закрывает соединение с БД, если оно было установлено'''
    if hasattr(g, 'link_db'):
        g.link_db.close()


@app.route('/add_post', methods=['POST', 'GET'])
def add_post():
    '''Обработчик добавления новой статьи в базу данных'''
    if request.method == 'POST':
        if len(request.form['name']) > 4 and len(request.form['post']) > 10:
            res = d_base.add_post(request.form['name'], request.form['url'], request.form['post'])
            if not res:
                flash('Ошибка добавления статьи', category='error')
            else:
                flash('Статья успешно добавлена', category='success')
        else:
            flash('Ошибка добавления статьи', category='error')
    return render_template('add_post.html', menu=d_base.get_menu(), title='Добавление статьи')


@app.route('/post/<alias>')
def show_post(alias):
    '''Обработчик отдельной выбранной статьи'''
    title, post = d_base.get_post(alias)
    if not title:
        abort(404)
    return render_template('post.html', menu=d_base.get_menu(), title=title, post=post)


# @app.route('/about')
# def about():
#     '''Обработчик страницы О сайте'''
#     print(url_for('about'))
#     title = 'О сайте'
#     return render_template('about.html', title=title, menu=menu)


# @app.route('/contact', methods=['POST','GET'])
# def contact():
#     '''Обработчик страницы Обратная связь'''
#     if request.method == 'POST':
#         # print(request.form['username'])
#         if len(request.form['username']) > 2:
#             flash('Сообщение отправлено', category='success')
#         else:
#             flash('Ошибка отправки сообщения', category='error')
#     return render_template('contact.html', title='Обратная связь', menu=menu)


# @app.route('/profile/<username>')
# def profile(username):
#     '''Обработчик с динамическим URL'''
#     if 'userLogged' not in session or session['userLogged'] != username:
#         #Если пользователь не авторизован или пытается зайти на чужую
#         #  страницу, то ему будет выдано сообщение об отказе в доступе
#         abort(401)
#     return f"Профиль пользователя {username}"


# @app.route('/login', methods=['POST', 'GET'])
# def login():
#     '''Обработчик формы Логин'''
#     if 'userLogged' in session:
#         return redirect(url_for('profile', username=session['userLogged']))
#     elif request.method == 'POST' \
#         and request.form['username'] == 'priv-u' \
#         and request.form['psw'] == '1234':
#         session['userLogged'] = request.form['username']
#         return redirect(url_for('profile', username=session['userLogged']))
#     return render_template('login.html', title='Авторизация', menu=menu)


# @app.errorhandler(404)
# def page_not_found(error):
#     '''Обработчик ошибки открытия несуществующей страницы'''
#     return render_template('page404.html', title='Страница не найдена', menu=menu), 404


#Тестовый контекст для проверки
# with app.test_request_context():
#     print(url_for('index'))
#     print(url_for('about'))
#     print(url_for('contact'))


if __name__ == '__main__':
    app.run(debug=True)
